public:
    Node(int ID, const T& obj): ID(ID), obj(obj), height(0){};
    ~Node();
    Node(const Node&)=delete;
    int getId() const;
    int getHeight() const;
    void updateHeight(int adder);
    Node * getFather() const;
    Node * getLeftSon() const;
    Node * getRightSon() const;
    void setFather(const Node<T> * father);
    void setLeftSon(const Node<T> * leftSon);
    void setRightSon(const Node<T> * rightSon);

    void printNode(ostream &os) const;



template<class T>
int Node<T>::getId() const {
    return this->ID();
}

template<class T>
int Node<T>::getHeight() const {
    return this->height;
}
template<class T>
void Node<T>::updateHeight(int adder) {
    height+=adder;
}

template<class T>
Node<T> *Node<T>::getFather() const {
    return &(this->father);
}

template<class T>
Node<T> *Node<T>::getLeftSon() const {
    return &(this->left_son);
}

template<class T>
Node<T> *Node<T>::getRightSon() const {
    return &(this->right_son);
}

template<class T>
void Node<T>::printNode(ostream &os) const {
    os << std::endl;
}
template<class T>
void Node<T>::setFather(const Node<T> * nfather){
    this->father = nfather;
}
template<class T>
void Node<T>::setLeftSon(const Node<T> * nleftSon){
    this->left_son = nleftSon;

}
template<class T>
void Node<T>::setRightSon(const Node<T> * nrightSon){
    this->right_son = nrightSon;
}
